{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","handleChange","event","setState","unmarkedText","target","value","state","marked","setOptions","breaks","__html","this","sanitize","className","rows","id","onChange","dangerouslySetInnerHTML","getMarkdownExample","style","height","backgroundColor","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4PAsFeA,G,wDAjFb,aAAe,IAAD,8BACZ,gBAqDFC,aAAe,SAACC,GACd,EAAKC,SAAS,CACVC,aAAcF,EAAMG,OAAOC,SAtD/B,EAAKC,MAAQ,CACXH,aAAa,6pCAHH,E,iEAmDZ,OAJAI,IAAOC,WAAW,CAChBC,QAAQ,IAGH,CAAEC,OADOH,IAAOI,KAAKL,MAAMH,aAAc,CAACS,UAAU,O,+BAW3D,OACE,yBAAKC,UAAU,OACb,6CACA,4CACA,yBAAKA,UAAU,OACb,8BAAUA,UAAU,iCAAiCC,KAAK,KAAKC,GAAG,SAASC,SAAUL,KAAKX,aAAcK,MAAOM,KAAKL,MAAMH,gBAE5H,uCACA,yBAAKU,UAAU,OACb,yBAAKA,UAAU,+CAA+CE,GAAG,UAAUE,wBAAyBN,KAAKO,wBAE3G,yBAAKC,MAAO,CAACC,OAAQ,GAAIC,gBAAiB,WAC1C,yBAAKF,MAAO,CAACC,OAAQ,GAAIC,gBAAiB,SAAUR,UAAU,8DAC5D,uBAAGA,UAAU,iCAAb,qE,GA3EQS,IAAMC,YCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.772ce851.chunk.js","sourcesContent":["import React from 'react';\nimport marked from 'marked';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      unmarkedText: \n`# Welcome to my React Markdown Previewer!\n## This is a sub-heading...\n### And here's some other cool stuff:\nHeres some code, \\`<div></div>\\`, between 2 backticks.\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n\nThere's also [links](https://www.freecodecamp.com), and\n> Block Quotes!\n\nAnd if you want to get really crazy, even tables:\nWild Header | Crazy Header | Another Header?\n------------ | ------------- | ------------- \nYour content can | be here, and it | can be here....\nAnd here. | Okay. | I think we get it.\n\n- And of course there are lists.\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n1. And there are numbererd lists too.\n1. Use just 1s if you want! \n1. But the list goes on...\n- Even if you use dashes or asterisks.\n* And last but not least, let's not forget embedded images:\n\n![React Logo w/ Text](https://goo.gl/Umyytc)\n`\n    }\n  }\n  \n  getMarkdownExample() {\n    marked.setOptions({\n      breaks: true\n    })\n    var rawMarkup = marked(this.state.unmarkedText, {sanitize: true})\n    return { __html: rawMarkup};\n  }\n\n  handleChange = (event) => {\n    this.setState({\n        unmarkedText: event.target.value\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Markup Editor</h1>\n        <h2>Insert text:</h2>\n        <div className=\"row\">\n          <textarea className=\"container-fluid col-md-4 small\" rows=\"10\" id=\"editor\" onChange={this.handleChange} value={this.state.unmarkedText} />\n        </div>\n        <h2>Result:</h2>\n        <div className=\"row\">\n          <div className=\"jumbotron container-fluid text-left col-md-6\" id=\"preview\" dangerouslySetInnerHTML={this.getMarkdownExample()}/>\n        </div>\n        <div style={{height: 45, backgroundColor: \"white\"}}></div>\n        <div style={{height: 45, backgroundColor: \"white\"}} className=\"fixed-bottom d-flex justify-content-center align-items-end\">\n          <p className=\"text-center font-italic small\">Made by Dan Sprucek as a part of freeCodeCamp certification</p>\n        </div>\n\n      </div>\n    );\n  }\n}\nexport default App;\n\n\n// User Story #1: I can see a textarea element with a corresponding id=\"editor\".\n\n// User Story #2: I can see an element with a corresponding id=\"preview\".\n\n// User Story #3: When I enter text into the #editor element, the #preview element is updated as I type to display the content of the textarea.\n\n// User Story #4: When I enter GitHub flavored markdown into the #editor element, the text is rendered as HTML in the #preview element as I type (HINT: You don't need to parse Markdown yourself - you can import the Marked library for this: https://cdnjs.com/libraries/marked).\n\n// !! User Story #5: When my markdown previewer first loads, the default text in the #editor field should contain valid markdown that represents at least one of each of the following elements: a header (H1 size), a sub header (H2 size), a link, inline code, a code block, a list item, a blockquote, an image, and bolded text.\n\n// User Story #6: When my markdown previewer first loads, the default markdown in the #editor field should be rendered as HTML in the #preview element.\n\n// Optional Bonus (you do not need to make this test pass): My markdown previewer interprets carriage returns and renders them as br (line break) elements.","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}