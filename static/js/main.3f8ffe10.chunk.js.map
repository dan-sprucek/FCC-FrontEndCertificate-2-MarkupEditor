{"version":3,"sources":["App.js","index.js"],"names":["App","handleChange","event","setState","unmarkedText","target","value","state","marked","setOptions","breaks","__html","this","sanitize","className","rows","id","onChange","dangerouslySetInnerHTML","getMarkdownExample","style","height","backgroundColor","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0MAoFeA,E,kDAhFb,aAAe,IAAD,8BACZ,gBAqDFC,aAAe,SAACC,GACd,EAAKC,SAAS,CACVC,aAAcF,EAAMG,OAAOC,SAtD/B,EAAKC,MAAQ,CACXH,aAAa,6pCAHH,E,iEAmDZ,OAJAI,IAAOC,WAAW,CAChBC,QAAQ,IAGH,CAAEC,OADOH,IAAOI,KAAKL,MAAMH,aAAc,CAACS,UAAU,O,+BAW3D,OACE,yBAAKC,UAAU,mBACb,6CACA,4CACA,yBAAKA,UAAU,OACb,8BAAUA,UAAU,iCAAiCC,KAAK,KAAKC,GAAG,SAASC,SAAUL,KAAKX,aAAcK,MAAOM,KAAKL,MAAMH,gBAE5H,uCACA,yBAAKU,UAAU,OACb,yBAAKA,UAAU,+CAA+CE,GAAG,UAAUE,wBAAyBN,KAAKO,wBAE3G,yBAAKC,MAAO,CAACC,OAAQ,GAAIC,gBAAiB,WAC1C,yBAAKF,MAAO,CAACC,OAAQ,GAAIC,gBAAiB,SAAUR,UAAU,8DAC5D,uBAAGA,UAAU,iCAAb,qE,GA3EQS,IAAMC,WCCxBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.3f8ffe10.chunk.js","sourcesContent":["import React from 'react';\nimport marked from 'marked';\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      unmarkedText: \n`# Welcome to my React Markdown Previewer!\n## This is a sub-heading...\n### And here's some other cool stuff:\nHeres some code, \\`<div></div>\\`, between 2 backticks.\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n\nThere's also [links](https://www.freecodecamp.com), and\n> Block Quotes!\n\nAnd if you want to get really crazy, even tables:\nWild Header | Crazy Header | Another Header?\n------------ | ------------- | ------------- \nYour content can | be here, and it | can be here....\nAnd here. | Okay. | I think we get it.\n\n- And of course there are lists.\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n1. And there are numbererd lists too.\n1. Use just 1s if you want! \n1. But the list goes on...\n- Even if you use dashes or asterisks.\n* And last but not least, let's not forget embedded images:\n\n![React Logo w/ Text](https://goo.gl/Umyytc)\n`\n    }\n  }\n  \n  getMarkdownExample() {\n    marked.setOptions({\n      breaks: true\n    })\n    var rawMarkup = marked(this.state.unmarkedText, {sanitize: true})\n    return { __html: rawMarkup};\n  }\n\n  handleChange = (event) => {\n    this.setState({\n        unmarkedText: event.target.value\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App text-center\">\n        <h1>Markup Editor</h1>\n        <h2>Insert text:</h2>\n        <div className=\"row\">\n          <textarea className=\"container-fluid col-md-4 small\" rows=\"10\" id=\"editor\" onChange={this.handleChange} value={this.state.unmarkedText} />\n        </div>\n        <h2>Result:</h2>\n        <div className=\"row\">\n          <div className=\"jumbotron container-fluid text-left col-md-6\" id=\"preview\" dangerouslySetInnerHTML={this.getMarkdownExample()}/>\n        </div>\n        <div style={{height: 45, backgroundColor: \"white\"}}></div>\n        <div style={{height: 45, backgroundColor: \"white\"}} className=\"fixed-bottom d-flex justify-content-center align-items-end\">\n          <p className=\"text-center font-italic small\">Made by Dan Sprucek as a part of freeCodeCamp certification</p>\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;\n\n\n// User Story #1: I can see a textarea element with a corresponding id=\"editor\".\n\n// User Story #2: I can see an element with a corresponding id=\"preview\".\n\n// User Story #3: When I enter text into the #editor element, the #preview element is updated as I type to display the content of the textarea.\n\n// User Story #4: When I enter GitHub flavored markdown into the #editor element, the text is rendered as HTML in the #preview element as I type (HINT: You don't need to parse Markdown yourself - you can import the Marked library for this: https://cdnjs.com/libraries/marked).\n\n// !! User Story #5: When my markdown previewer first loads, the default text in the #editor field should contain valid markdown that represents at least one of each of the following elements: a header (H1 size), a sub header (H2 size), a link, inline code, a code block, a list item, a blockquote, an image, and bolded text.\n\n// User Story #6: When my markdown previewer first loads, the default markdown in the #editor field should be rendered as HTML in the #preview element.\n\n// Optional Bonus (you do not need to make this test pass): My markdown previewer interprets carriage returns and renders them as br (line break) elements.","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}